//topographical sort

var traverse = require('traverser')

exports = module.exports = sort

  function sort(depends) {
    var levels = []
      , requires = {}
      
    if(Object.keys(depends).length == 0)
      return []
    
    traverse(depends,{branch: roots})

    sorted = levels.reduce(function (x,y){
      return x.concat(y)
    })
      
    return sorted.map(deps)
    
    function roots(p){
      var level = p.max() + 0
      if(p.parent){
        levels[level] = levels[level] || []
        if(-1 == levels[level].indexOf(p.key))
          levels[level].push(p.key)
        requires[p.key] = Object.keys(p.value)
      }
      return level + 1
    }
    function deps(x){
      return [x,requires[x]]
    }
  }
  
exports.flat = flat
    function flat(depends) {
    var levels = []
      , requires = {}
      
    if(Object.keys(depends).length == 0)
      return []
    
    traverse(depends,{branch: roots})

    sorted = levels.reduce(function (x,y){
      return x.concat(y)
    })
      
    return sorted
    
    function roots(p){
      var level = p.max() + 0
      if(p.parent){
        levels[level] = levels[level] || []
        if(-1 == levels[level].indexOf(p.key))
          levels[level].push(p.key)
        requires[p.key] = Object.keys(p.value)
      }
      return level + 1
    }
  }
  
  var simple = 
      { x: 
        { y: 
          { z: {}
          , a: {}}}}

  console.log(flat(simple))
  console.log(sort(simple))

//a much more complex example, tree is acutal dependencies, generated by remap (> npm install remap)
        
 var var0,var1,var2,var3,var4,var5,var6,var7,var8,var9,var10
   ,var11,var12,var13,var14,var15,var16,var17,var18,var19,var20
   ,var21,var22,var23,var24

var complex = 
{
 'meta-test/asynct_adapter': {
   'async_testing/lib/testing': {
     assert: var1={}
    , path: var2={}
    , fs: var0={}
    , child_process: var3={}
    , 'async_testing/lib/messages': {}
    , inspect: var6={
       'inspect/inspect': {}
       }
     }
  , 'meta-test/test_reports': {
     easyfs: {
       'easyfs/easyfs': {
         fs: var0
        , util: var4={}
        , assert: var1
        , path: var2
        , child_process: var3
         }
       }
    , util: var4
    , assert: var1
    , query: {
       'query/query': {
         inspect: var6
         }
       }
     }
  , inspect: var6
  , 'style/error': var10={
     style: var8={
       'style/style': {}
       }
     }
  , style: var8
  , '/home/dominic/dev/miniorm/test/miniorm-async.asynct.js': {
     'miniorm/miniorm-async': {
       dirty: {
         'dirty/lib/dirty': {
           'dirty/lib/dirty/dirty': {
             fs: var0
            , sys: {}
            , events: {}
             }
           }
         }
      , curry: var13={
         'curry/curry': {}
         }
      , 'traverser/iterators': var19={
         logger: var14={
           'style/error': var10
          , style: var8
          , inspect: var6
           }
        , curry: var13
         }
      , logger: var14
       }
    , it: {
       'it/it': {
         'c-assert': {
           'c-assert/c-assert': {
             assert: var1
            , 'traverser/equals': {
               'traverser/traverser2': var24={
                 inspect: var6
                , logger: var14
                , curry: var13
                , 'traverser/iterators': var19
                 }
              , logger: var14
              , style: var8
               }
            , style: var8
             }
           }
        , 'it/assert': {
           assert: var1
          , 'traverser/traverser2': var24
          , logger: var14
          , inspect: var6
           }
        , logger: var14
        , inspect: var6
        , 'render/render2': {
           traverser: {
             'traverser/traverser2': var24
             }
          , logger: var14
           }
         }
       }
     }
   }
 }
 
  console.log(flat(complex))
  console.log(sort(complex))

